*** check-off "instructions" ***
\\\\\\\\\\//////////

When setting up these elements have a close look at the mockups and see how they behave in the different screen sizes. For this project you'll want to utilize Flexbox to change the positioning of the label / input elements. To make this easier we suggest to wrap each pair of label / input into a separate div element. This way you can change the flex-direction to move the elements side by side or on top of each other depending on the viewport size.

Labels
Ensure proper labeling of form elements to improve accessibility and usability.

Make sure that the text inside each label matches the names in the mockups.
Pair each <label> element with its corresponding form field via the for attribute. The label’s for attribute should match the associated form field's id attribute.
Note: Make sure that the textarea element has a functioning label too.
Required Placeholder Text
Use the input field's placeholder attribute to add the text "Required" to:

***

The Full Name input field
The Email address input field
Create the Base Styles
For this project, we will be using the mobile-first approach. This means that the base styles will create the project how it should look on smaller-sized screens.

Look at the provided mockup for mobile devices and create the HTML structure for the different elements in your index.html file (header, titles, content, footer etc).
With CSS, style your layout to match the provided mobile mockup. Make sure your mobile design matches the mockup at 320px screen size.
Note: It can be tricky to add custom styles to radio buttons and checkboxes. These elements won't have to be styled to match the mockups but kept at the browser default.
Pro Tip
While your project will be graded to match the mockups on the 320px and 768px breakpoints you'll want your project to look good on all screen sizes in between those widths as well. Best way to accomplish this would be to avoid the use of fixed px values and use percentage based values instead for properties like width and max-width.

Apply Styles for Tablet Sized Screens
Once you've created the base styles for your project it's time to move on to the styles for medium-sized screens.

Create a media query that applies styles when the screen has a minimum width of 768px.
In this media query add styles to match the tablet-mockup.
Focus States
Add focus states to the input, select, and textarea elements for when a user clicks or tabs into them.

Match the Mockups
Double-check that your project matches the mockups at all screen sizes:

The design does not need to be exact, but the general spacing and arrangement of the elements should match the design of the mockups at the 320px and 768px viewport widths.
On small screen sizes:
Label text should be above the form field.
The Zip Code input is roughly half of the width of other inputs.
On larger screen sizes:
Label text should be to the left side of the form field.
The Zip Code input is roughly a quarter of the width of other inputs.
NOTE
For this project, we will be checking the design in Google Chrome. Different browsers display forms slightly differently so please make sure it looks correct in Google Chrome before submitting.

Validate Your Code
Make sure to check your code is valid by running it through an HTML and CSS validator to spot any errors that might be in your code.

You can ignore any warnings, we just need you to check any errors that might be there.

Finishing the Project
The final stage of the project is perhaps the most important. This is where your developer skills really shine as you carefully double-check that you've accomplished all requirements and that your project is ready for submission.

Code comments - It’s a best practice for development code to be well commented. Replace provided comments with your own to briefly describe your code.
Code readability - Readability is second only to functionality. Double-check your code to ensure the spacing and indentation are consistent.
Cross-browser consistency - To pass, your project only needs to work in Chrome, but it’s common for developers to test their projects in multiple browsers to know how they will perform out in the wild.
Quality Assurance Testing - This is the keystone step in the development process.
Open and run your app.
Open the Chrome DevTools console.
Pretend to be a user and test all aspects of functionality and every possible state of the app, while monitoring the console for bugs and resolving any that arise.

=========
*** check-off "meets expectations" ***
-
=========
*** check-off "meets expectations" ***
-
*** check-off "exceeds" ***
-


==========================================
*************** D O N E ********************
==========================================

code HTML semantics

add needed attributes

explore whether to use flexbox or <br> to space and break for layout

style <header>

style <aside>

set width for <main>

style .2-bar & .1-bar <div>

style "Contact Info" section
    - shift placeholers "required" to the right
    - add "focus" with blue outline
    - add a "select" dropdown for the "state" label
        - background match
        - box size match
        - fix focus (it stays on)
        - lower opacity of text (cannot accomplish with HTML & CSS alone)
            ***accomplished by selecting "select" and styling
        - resarch the double arrow and add (***the browser determines this feature)
        - padding for "Choose State"
        - shorten width of "zip code"
    - add margin-bottom after last text box
    - add margin-left & right for input text
    - match font (change to required font for project)
    - style checkboxes/radio-buttons to match mockup (***browser specific. would have to create one)
    - change "state" list back to black
style button
Match font-size of all content
style footer
increase margin/line-height of <label> elements
    - figure out why cannot put margin atop and bottom of "Newletter" labels 
    />***the <label> element is an inline element. Changed to "inline-block"
style "Newsletter" section
- space out with margin-top/bottom
DRY: check and correct